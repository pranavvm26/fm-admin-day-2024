---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This CloudFormation stack creates and configures a virtual private cloud (VPC) environment tailored for Amazon SageMaker. 
  It defines a VPC with public and private subnets, along with essential network components like an Internet Gateway, NAT Gateway, and route tables. 
  Security groups are established to control traffic for SageMaker instances and VPC endpoints. The stack also provisions multiple VPC endpoints for services such as S3, SageMaker API, and CloudWatch, ensuring secure and private access. 
  Finally, it sets up a SageMaker Studio Domain and User Profile, assigning necessary roles and permissions to facilitate SageMaker operations.

Mappings:
  VpcConfigurations:
    cidr:
      Vpc: 10.0.0.0/16
      PublicSubnet1: 10.0.10.0/24
      PrivateSubnet1: 10.0.20.0/24

Parameters:
  SageMakerDomainName:
    Type: String
    Description: Name of the Studio Domain to Create
    Default: SageMakerFMAdminDomain

Resources:

  StudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "sagemaker-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: 
              - POST
              - PUT
              - GET
              - HEAD
              - DELETE
            AllowedOrigins: ["https://*.sagemaker.aws"]
            ExposedHeaders: 
              - ETag
              - x-amz-delete-marker
              - x-amz-id-2
              - x-amz-request-id
              - x-amz-server-side-encryption
              - x-amz-version-id

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - VpcConfigurations
        - cidr
        - Vpc
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "for-use-with-amazon-emr-managed-policies"
          Value: "true"
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
 
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'
 
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
 
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !FindInMap 
        - VpcConfigurations
        - cidr
        - PublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Subnet (AZ1)'
 
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !FindInMap 
        - VpcConfigurations
        - cidr
        - PrivateSubnet1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "for-use-with-amazon-emr-managed-policies"
          Value: "true"
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Subnet (AZ1)'
 
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
 
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NatGateway1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
 
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Routes'
 
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
 
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
 
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Routes (AZ1)'


  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
 
  PrivateSubnet1InternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable1
 
  SageMakerInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: "for-use-with-amazon-amazon-sagemaker"
          Value: "true"
      GroupName: SMSG
      GroupDescription: Security group with no ingress rule
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SageMakerInstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      GroupId: !Ref SageMakerInstanceSecurityGroup
      SourceSecurityGroupId: !Ref SageMakerInstanceSecurityGroup
  
  SSHSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SageMakerInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow TLS for VPC Endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-endpoint-security-group

  EndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      GroupId: !Ref VPCEndpointSecurityGroup
      SourceSecurityGroupId: !Ref SageMakerInstanceSecurityGroup

  SageMakerExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-SageMakerAdminExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - !Sub "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - !Sub "arn:aws:iam::aws:policy/AmazonSageMakerPipelinesIntegrations"
        # Canvas-specific policies below
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerCanvasFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerCanvasDataPrepFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSageMakerCanvasDirectDeployAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerCanvasAIServicesAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSageMakerCanvasForecastAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSLambda_FullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
        

  VPCEndpointSagemakerAPI:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sagemaker.api'
      VpcId: !Ref VPC

  VPCEndpointSageMakerRuntime:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sagemaker.runtime'
      VpcId: !Ref VPC
  
  VPCEndpointSTS:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sts'
      VpcId: !Ref VPC
  
  VPCEndpointCW:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      VpcId: !Ref VPC
  
  VPCEndpointCWL:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcId: !Ref VPC
  
  VPCEndpointECR:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref VPC
  
  VPCEndpointECRAPI:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcId: !Ref VPC
  
  # # Add these resources
  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-0aff18ec83b712f05 #ami-0862be96e41dcbf74
  #     InstanceType: t2.micro
  #     SubnetId: !Ref PrivateSubnet1
  #     SecurityGroupIds:
  #       - !Ref SageMakerInstanceSecurityGroup
  #     UserData:
  #       Fn::Base64:
  #         !Sub |
  #           #!/bin/bash
  #           echo "Allowing SSH access without keypair"
  #           sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
  #           sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
  #           service sshd restart

  StudioDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      DomainName: !Ref SageMakerDomainName
      AppNetworkAccessType: PublicInternetOnly #VpcOnly
      AuthMode: IAM
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PublicSubnet1
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        SecurityGroups:
           - !Ref SageMakerInstanceSecurityGroup
  
  CustomFetchStudioNfsSgIds:
    Type: Custom::FetchStudioNfsSgIDsCustom
    DependsOn: StudioDomain
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - FetchStudioNfsSgIDs
          - Arn
      VPC_ID:
        Ref: VPC

  FetchStudioNfsSgIDs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub |
          import os, json, boto3, logging
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  logger.info("event ResourceProperties", event['ResourceProperties'])
                  vpc_id = region_name = os.environ.get('TEMP_VPC_ID')  #event['ResourceProperties']['VPC_ID']
                  print("vpc_id", vpc_id)
                  logger.info(f"found VPC ID: {vpc_id}")
                  # Create an EC2 client
                  ec2 = boto3.client('ec2')

                  # Describe security groups with a filter for the VPC ID
                  response = ec2.describe_security_groups(
                      Filters=[
                          {
                              'Name': 'vpc-id',
                              'Values': [vpc_id]
                          }
                      ]
                  )

                  # Print security group details
                  sg_ids = []
                  for sg in response['SecurityGroups']:
                      if sg['GroupName'].startswith("security-group-for-outbound-nfs-d") or sg['GroupName'].startswith("security-group-for-inbound-nfs-d") or sg['GroupName'].startswith("SMSG"):
                          logger.info(f"Adding: {sg['GroupName']}")
                          sg_ids.append(sg['GroupId'])

                  responseData = {
                      'SGIDs': sg_ids
                  }
                  logger.info(f"Response Data: {responseData}")
                  sendResponseCfn(event, context, cfnresponse.SUCCESS, responseData)
                  # sendResponseCfn(event, context, cfnresponse.SUCCESS)

              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  sendResponseCfn(event, context, cfnresponse.FAILED, {})
          
          def sendResponseCfn(event, context, responseStatus, responseData):
              # responseData = {}
              # responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")

      Handler: "index.lambda_handler"
      Runtime: python3.10
      MemorySize: 128
      Environment:
        Variables:
          TEMP_VPC_ID: !Ref VPC
      Timeout: 30
      Role: !GetAtt SageMakerExecutionRole.Arn

  # Add these resources
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      ThroughputMode: bursting

  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    DependsOn: CustomFetchStudioNfsSgIds
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups: !GetAtt CustomFetchStudioNfsSgIds.SGIDs
  
   
  StudioUserProfile1:
    Type: AWS::SageMaker::UserProfile
    DependsOn: EFSMountTarget
    Properties:
      DomainId: !Ref StudioDomain
      UserProfileName: user1
      UserSettings: 
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        CustomFileSystemConfigs: 
          - EFSFileSystemConfig:
              FileSystemId: !Ref EFSFileSystem
              FileSystemPath: "/home/user1"
        
  StudioUserProfile2:
    Type: AWS::SageMaker::UserProfile
    DependsOn: EFSMountTarget
    Properties:
      DomainId: !Ref StudioDomain
      UserProfileName: user2
      UserSettings: 
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        CustomFileSystemConfigs: 
          - EFSFileSystemConfig:
              FileSystemId: !Ref EFSFileSystem
              FileSystemPath: "/home/user2"

# Stack Outputs
###########################################################################
Outputs:

  SageMakerCloudformationVPCId2:
    Description: The ID of the Sagemaker Studio VPC
    Value: !Ref VPC
    Export:
      Name: "SageMakerCloudformationVPCId2"

  SageMakerEMRDemoCloudformationSubnetId2:
    Description: The Subnet Id of Sagemaker Studio
    Value: !Ref PrivateSubnet1
    Export:
      Name: "SageMakerCloudformationSubnetId2"
  
  SageMakerEMRDemoCloudformationSubnetIdPublic2:
    Description: The Subnet Id of Sagemaker Studio
    Value: !Ref PublicSubnet1
    Export:
      Name: "SageMakerCloudformationPublicSubnetId2"

  SageMakerEMRDemoCloudformationSecurityGroup2:
    Description: The Security group of Sagemaker Studio instance
    Value: !Ref SageMakerInstanceSecurityGroup
    Export:
      Name: "SageMakerCloudformationSecurityGroup2"

  SageMakerDomain2:
    Description: "SageMaker Domain Id"
    Value: !Ref StudioDomain
    Export:
      Name: SageMakerDomainId

  SageMakerDomainUrl2:
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/sagemaker/home?region='
        - !Ref 'AWS::Region'
        - '#/studio/'
        - !Ref StudioDomain
    Description: URL to access the SageMaker Domain

  BYOEFS2:
    Description: "SageMaker BYOEFS"
    Value: !Ref EFSFileSystem
    Export:
      Name: BYOEFSID2
